global:
  imageRegistry: ""
  imagePullSecrets: []
  storageClass: ""
image:
  registry: docker.io
  repository: bitnami/rabbitmq
  tag: 3.9.14-debian-10-r15
  debug: false
  pullPolicy: IfNotPresent
  pullSecrets: []
nameOverride: ""
fullnameOverride: ""
kubeVersion: ""
clusterDomain: cluster.local
extraDeploy: []
diagnosticMode:
  enabled: false
  command:
    - sleep
  args:
    - infinity
hostAliases: []
commonAnnotations: {}
auth:
  username: admin
  password: "Abcd123$"
  existingPasswordSecret: ""
  erlangCookie: "erlangCookie"
  existingErlangSecret: ""
  tls:
    enabled: false
    autoGenerated: false
    failIfNoPeerCert: true
    sslOptionsVerify: verify_peer
    caCertificate: |-
    serverCertificate: |-
    serverKey: |-
    existingSecret: ""
    existingSecretFullChain: false
logs: "-"
ulimitNofiles: "65536"
maxAvailableSchedulers: ""
onlineSchedulers: ""
memoryHighWatermark:
  enabled: false
  type: "relative"
  value: 0.4
plugins: "rabbitmq_management rabbitmq_peer_discovery_k8s"
communityPlugins: ""
extraPlugins: "rabbitmq_auth_backend_ldap"
clustering:
  enabled: true
  addressType: hostname
  rebalance: false
  forceBoot: true
  partitionHandling: autoheal
loadDefinition:
  enabled: false
  file: "/app/load_definition.json"
  existingSecret: ""
command: []

args: []

terminationGracePeriodSeconds: 120

extraEnvVars: []
extraEnvVarsCM: ""
extraEnvVarsSecret: ""
extraContainerPorts: []
configuration: |-
  ## Username and password
  ##
  default_user = {{ .Values.auth.username }}
  default_pass = CHANGEME
  {{- if .Values.clustering.enabled }}
  ## Clustering
  ##
  cluster_formation.peer_discovery_backend  = rabbit_peer_discovery_k8s
  cluster_formation.k8s.host = kubernetes.default.svc.{{ .Values.clusterDomain }}
  cluster_formation.node_cleanup.interval = 10
  cluster_formation.node_cleanup.only_log_warning = true
  cluster_partition_handling = {{ .Values.clustering.partitionHandling }}
  {{- end }}
  {{- if .Values.loadDefinition.enabled }}
  load_definitions = {{ .Values.loadDefinition.file }}
  {{- end }}
  # queue master locator
  queue_master_locator = min-masters
  # enable guest user
  loopback_users.guest = false
  {{ tpl .Values.extraConfiguration . }}
  {{- if .Values.auth.tls.enabled }}
  ssl_options.verify = {{ .Values.auth.tls.sslOptionsVerify }}
  listeners.ssl.default = {{ .Values.service.tlsPort }}
  ssl_options.fail_if_no_peer_cert = {{ .Values.auth.tls.failIfNoPeerCert }}
  ssl_options.cacertfile = /opt/bitnami/rabbitmq/certs/ca_certificate.pem
  ssl_options.certfile = /opt/bitnami/rabbitmq/certs/server_certificate.pem
  ssl_options.keyfile = /opt/bitnami/rabbitmq/certs/server_key.pem
  {{- end }}
  {{- if .Values.ldap.enabled }}
  auth_backends.1 = rabbit_auth_backend_ldap
  auth_backends.2 = internal
  {{- range $index, $server := .Values.ldap.servers }}
  auth_ldap.servers.{{ add $index 1 }} = {{ $server }}
  {{- end }}
  auth_ldap.port = {{ .Values.ldap.port }}
  auth_ldap.user_dn_pattern = {{ .Values.ldap.user_dn_pattern  }}
  {{- if .Values.ldap.tls.enabled }}
  auth_ldap.use_ssl = true
  {{- end }}
  {{- end }}
  {{- if .Values.metrics.enabled }}
  ## Prometheus metrics
  ##
  prometheus.tcp.port = 9419
  {{- end }}
  {{- if .Values.memoryHighWatermark.enabled }}
  ## Memory Threshold
  ##
  total_memory_available_override_value = {{ include "rabbitmq.toBytes" .Values.resources.limits.memory }}
  vm_memory_high_watermark.{{ .Values.memoryHighWatermark.type }} = {{ .Values.memoryHighWatermark.value }}
  {{- end }}
extraConfiguration: |-
  #default_vhost = {{ .Release.Namespace }}-vhost
  #disk_free_limit.absolute = 50MB
advancedConfiguration: |-
ldap:
  enabled: false
  servers: []
  port: "389"
  user_dn_pattern: cn=${username},dc=example,dc=org
  tls:
    enabled: false
extraVolumeMounts: []
extraVolumes: []
extraSecrets: {}
extraSecretsPrependReleaseName: false
replicaCount: 1
schedulerName: ""
podManagementPolicy: OrderedReady
podLabels: {}
podAnnotations: {}
updateStrategyType: RollingUpdate
statefulsetLabels: {}
priorityClassName: ""
podAffinityPreset: ""
podAntiAffinityPreset: soft
nodeAffinityPreset:
  type: ""
  key: ""
  values: []
affinity: {}
nodeSelector: {}
tolerations: []
topologySpreadConstraints: []
podSecurityContext:
  enabled: true
  fsGroup: 1001
  runAsUser: 1001
containerSecurityContext: {}
resources:
  limits: {}
  requests: {}
livenessProbe:
  enabled: true
  initialDelaySeconds: 120
  timeoutSeconds: 20
  periodSeconds: 30
  failureThreshold: 6
  successThreshold: 1
readinessProbe:
  enabled: true
  initialDelaySeconds: 10
  timeoutSeconds: 20
  periodSeconds: 30
  failureThreshold: 3
  successThreshold: 1
customLivenessProbe: {}
customReadinessProbe: {}
customStartupProbe: {}
initContainers: []
sidecars: []
pdb:
  create: false
  minAvailable: 1
  maxUnavailable: ""
serviceAccount:
  create: true
  name: ""
  automountServiceAccountToken: true
rbac:
  create: true
persistence:
  enabled: true
  storageClass: ""
  selector: {}
  accessMode: ReadWriteOnce
  existingClaim: ""
  mountPath: /bitnami/rabbitmq/mnesia
  subPath: ""
  size: 8Gi
  volumes: []
  annotations: {}
service:
  type: NodePort
  portEnabled: true
  port: 5672
  portName: amqp
  tlsPort: 5671
  tlsPortName: amqp-ssl
  nodePort: "30672"
  tlsNodePort: "30671"
  distPortEnabled: true
  distPort: 25672
  distPortName: dist
  distNodePort: "30676"
  managerPortEnabled: true
  managerPort: 15672
  managerPortName: http-stats
  managerNodePort: "30673"
  metricsPort: 9419
  metricsPortName: metrics
  metricsNodePort: "30674"
  epmdPortEnabled: true
  epmdNodePort: "30675"
  epmdPortName: epmd
  extraPorts: []
  loadBalancerSourceRanges: []
  externalIPs: []
  externalTrafficPolicy: Cluster
  loadBalancerIP: ""
  labels: {}
  annotations: {}
  annotationsHeadless: {}
ingress:
  enabled: false
  path: /
  pathType: ImplementationSpecific
  hostname: rabbitmq.local
  annotations: {}
  tls: false
  selfSigned: false
  extraHosts: []
  extraRules: []
  extraTls: []
  secrets: []
  ingressClassName: ""
networkPolicy:
  enabled: false
  allowExternal: true
  additionalRules: []
metrics:
  enabled: false
  plugins: "rabbitmq_prometheus"
  podAnnotations:
    prometheus.io/scrape: "true"
    prometheus.io/port: "{{ .Values.service.metricsPort }}"
  serviceMonitor:
    enabled: false
    namespace: ""
    interval: 30s
    scrapeTimeout: ""
    relabellings: []
    relabelings: []
    metricRelabelings: []
    honorLabels: false
    additionalLabels: {}
    targetLabels: {}
    podTargetLabels: {}
    path: ""
  prometheusRule:
    enabled: false
    additionalLabels: {}
    namespace: ""
    rules: []
volumePermissions:
  enabled: false
  image:
    registry: docker.io
    repository: bitnami/bitnami-shell
    tag: 10-debian-10-r388
    pullPolicy: IfNotPresent
    pullSecrets: []
  resources:
    limits: {}
    requests: {}
