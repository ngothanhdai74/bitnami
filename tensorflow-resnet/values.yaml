global:
  imageRegistry: ""
  imagePullSecrets: []
kubeVersion: ""
nameOverride: ""
fullnameOverride: ""
commonAnnotations: {}
commonLabels: {}
extraDeploy: []
diagnosticMode:
  enabled: false
  command:
    - sleep
  args:
    - infinity
server:
  image:
    registry: docker.io
    repository: bitnami/tensorflow-serving
    tag: 2.8.0-debian-10-r49
    pullPolicy: IfNotPresent
    pullSecrets: []
client:
  image:
    registry: docker.io
    repository: bitnami/tensorflow-resnet
    tag: 2.8.0-debian-10-r39
    pullPolicy: IfNotPresent
    pullSecrets: []
hostAliases: []
containerPorts:
  server: 8500
  restApi: 8501
replicaCount: 1
podAnnotations: {}
podLabels: {}
podAffinityPreset: ""
podAntiAffinityPreset: soft
nodeAffinityPreset:
  type: ""
  key: ""
  values: []
affinity: {}
nodeSelector: {}
tolerations: []
podSecurityContext:
  enabled: true
  fsGroup: 1001
containerSecurityContext:
  enabled: true
  runAsUser: 1001
  runAsNonRoot: true
command: []
args: []
lifecycleHooks: {}
extraEnvVars: []
extraEnvVarsCM: ""
extraEnvVarsSecret: ""
extraVolumes: []
extraVolumeMounts: []
sidecars: []
initContainers: []
updateStrategy:
  type: RollingUpdate
priorityClassName: ""
schedulerName: ""
topologySpreadConstraints: []
resources:
  limits: {}
  requests: {}
startupProbe:
  enabled: false
  initialDelaySeconds: 30
  periodSeconds: 5
  timeoutSeconds: 5
  failureThreshold: 6
  successThreshold: 1
livenessProbe:
  enabled: true
  initialDelaySeconds: 30
  periodSeconds: 5
  timeoutSeconds: 5
  failureThreshold: 6
  successThreshold: 1
readinessProbe:
  enabled: true
  initialDelaySeconds: 15
  periodSeconds: 5
  timeoutSeconds: 5
  failureThreshold: 6
  successThreshold: 1
customStartupProbe: {}
customLivenessProbe: {}
customReadinessProbe: {}
service:
  type: LoadBalancer
  ports:
    server: 8500
    restApi: 8501
  nodePorts:
    server: ""
    restApi: ""
  clusterIP: ""
  loadBalancerIP: ""
  loadBalancerSourceRanges: []
  externalTrafficPolicy: Cluster
  extraPorts: []
  annotations: {}
  sessionAffinity: None
  sessionAffinityConfig: {}
metrics:
  enabled: false
  podAnnotations:
    prometheus.io/scrape: "true"
    prometheus.io/path: "/monitoring/prometheus/metrics"
    prometheus.io/port: "{{ .Values.containerPorts.restApi }}"
