global:
  imageRegistry: ""
  imagePullSecrets: []
  storageClass: ""
  coordinating:
    name: coordinating-only
  kibanaEnabled: false
nameOverride: ""
fullnameOverride: ""
clusterDomain: cluster.local
extraDeploy: []

diagnosticMode:
  enabled: false
  command:
    - sleep
  args:
    - infinity
image:
  registry: docker.io
  repository: bitnami/elasticsearch
  tag: 7.17.2-debian-10-r4
  pullPolicy: IfNotPresent
  pullSecrets: []
  debug: false

security:
  enabled: false
  elasticPassword: ""
  existingSecret: ""
  fipsMode: false
  tls:
    restEncryption: true
    autoGenerated: false
    verificationMode: "full"
    master:
      existingSecret: ""
    data:
      existingSecret: ""
    ingest:
      existingSecret: ""
    coordinating:
      existingSecret: ""
    keystorePassword: ""
    truststorePassword: ""
    keystoreFilename: elasticsearch.keystore.jks
    truststoreFilename: elasticsearch.truststore.jks
    usePemCerts: false
    keyPassword: ""
name: elastic
plugins: ""
snapshotRepoPath: ""
config: {}
extraConfig: {}
extraVolumes: []
extraVolumeMounts: []
initScripts: {}
initScriptsCM: ""
initScriptsSecret: ""
extraEnvVars: []
extraEnvVarsConfigMap: ""
extraEnvVarsSecret: ""
master:
  name: master
  fullnameOverride: ""
  replicas: 3
  updateStrategy:
    type: RollingUpdate
  hostAliases: []
  schedulerName: ""
  heapSize: 128m
  podAnnotations: {}
  podLabels: {}
  securityContext:
    enabled: true
    fsGroup: 1001
    runAsUser: 1001
  podSecurityContext:
    enabled: false
    fsGroup: 1001
  containerSecurityContext:
    enabled: false
    runAsUser: 1001
  podAffinityPreset: ""
  podAntiAffinityPreset: ""
  nodeAffinityPreset:
    type: ""
    key: ""
    values: []
  affinity: {}
  priorityClassName: ""
  nodeSelector: {}
  tolerations: []
  topologySpreadConstraints: []
  resources:
    limits: {}
    requests:
      cpu: 25m
      memory: 256Mi
  startupProbe:
    enabled: false
    initialDelaySeconds: 90
    periodSeconds: 10
    timeoutSeconds: 5
    successThreshold: 1
    failureThreshold: 5
  livenessProbe:
    enabled: true
    initialDelaySeconds: 90
    periodSeconds: 10
    timeoutSeconds: 5
    successThreshold: 1
    failureThreshold: 5
  readinessProbe:
    enabled: true
    initialDelaySeconds: 90
    periodSeconds: 10
    timeoutSeconds: 5
    successThreshold: 1
    failureThreshold: 5
  customStartupProbe: {}
  customLivenessProbe: {}
  customReadinessProbe: {}
  initContainers: []
  sidecars: []
  persistence:
    enabled: true
    storageClass: ""
    existingClaim: ""
    existingVolume: ""
    selector: {}
    annotations: {}
    accessModes:
      - ReadWriteOnce
    size: 8Gi
  service:
    type: ClusterIP
    port: 9300
    nodePort: ""
    annotations: {}
    loadBalancerIP: ""
  ingress:
    enabled: false

    pathType: ImplementationSpecific
    apiVersion: ""
    hostname: master.local
    path: /
    annotations: {}
    tls: false
    extraHosts: []
    extraPaths: []
    extraTls: []
    secrets: []
  serviceAccount:
    create: false
    name: ""
  autoscaling:
    enabled: false
    minReplicas: 2
    maxReplicas: 11
    targetCPU: ""
    targetMemory: ""
coordinating:
  fullnameOverride: ""
  replicas: 2
  hostAliases: []
  schedulerName: ""
  updateStrategy:
    type: RollingUpdate
  heapSize: 128m
  podAnnotations: {}
  podLabels: {}
  securityContext:
    enabled: true
    fsGroup: 1001
    runAsUser: 1001
  podSecurityContext:
    enabled: false
    fsGroup: 1001
  containerSecurityContext:
    enabled: false
    runAsUser: 1001
  podAffinityPreset: ""
  podAntiAffinityPreset: ""
  nodeAffinityPreset:
    type: ""
    key: ""
    values: []
  affinity: {}
  priorityClassName: ""
  nodeSelector: {}
  tolerations: []
  topologySpreadConstraints: []
  resources:
    limits: {}
    requests:
      cpu: 25m
      memory: 256Mi
  startupProbe:
    enabled: false
    initialDelaySeconds: 90
    periodSeconds: 10
    timeoutSeconds: 5
    successThreshold: 1
    failureThreshold: 5
  livenessProbe:
    enabled: true
    initialDelaySeconds: 90
    periodSeconds: 10
    timeoutSeconds: 5
    successThreshold: 1
    failureThreshold: 5
  readinessProbe:
    enabled: true
    initialDelaySeconds: 90
    periodSeconds: 10
    timeoutSeconds: 5
    successThreshold: 1
    failureThreshold: 5
  customStartupProbe: {}
  customLivenessProbe: {}
  customReadinessProbe: {}
  initContainers: []
  sidecars: []
  service:
    type: ClusterIP
    port: 9200
    nodePort: ""
    annotations: {}
    loadBalancerIP: ""
    externalTrafficPolicy: Cluster
  serviceAccount:
    create: false
    name: ""
  autoscaling:
    enabled: false
    minReplicas: 2
    maxReplicas: 11
    targetCPU: ""
    targetMemory: ""

data:
  name: data
  fullnameOverride: ""
  replicas: 2
  hostAliases: []
  schedulerName: ""
  updateStrategy:
    type: RollingUpdate
    rollingUpdatePartition: ""
  heapSize: 1024m
  podAnnotations: {}
  podLabels: {}
  securityContext:
    enabled: true
    fsGroup: 1001
    runAsUser: 1001
  podSecurityContext:
    enabled: true
    fsGroup: 1001
  containerSecurityContext:
    enabled: true
    runAsUser: 1001
  podAffinityPreset: ""
  podAntiAffinityPreset: ""
  nodeAffinityPreset:
    type: ""
    key: ""
    values: []

  affinity: {}
  priorityClassName: ""
  nodeSelector: {}
  tolerations: []
  topologySpreadConstraints: []
  resources:
    limits: {}
    requests:
      cpu: 25m
      memory: 2048Mi
  startupProbe:
    enabled: false
    initialDelaySeconds: 90
    periodSeconds: 10
    timeoutSeconds: 5
    successThreshold: 1
    failureThreshold: 5
  livenessProbe:
    enabled: true
    initialDelaySeconds: 90
    periodSeconds: 10
    timeoutSeconds: 5
    successThreshold: 1
    failureThreshold: 5
  readinessProbe:
    enabled: true
    initialDelaySeconds: 90
    periodSeconds: 10
    timeoutSeconds: 5
    successThreshold: 1
    failureThreshold: 5
  customStartupProbe: {}
  customLivenessProbe: {}
  customReadinessProbe: {}
  initContainers: []
  sidecars: []
  service:
    annotations: {}
  persistence:
    enabled: true
    storageClass: ""
    existingClaim: ""
    existingVolume: ""
    selector: {}
    annotations: {}
    accessModes:
      - ReadWriteOnce
    size: 8Gi
  serviceAccount:
    create: false
    name: ""
  autoscaling:
    enabled: false
    minReplicas: 2
    maxReplicas: 11
    targetCPU: ""
    targetMemory: ""

ingest:
  enabled: false
  name: ingest
  fullnameOverride: ""
  replicas: 2
  updateStrategy:
    type: RollingUpdate
  heapSize: 128m
  podAnnotations: {}
  hostAliases: []
  schedulerName: ""
  podLabels: {}
  securityContext:
    enabled: true
    fsGroup: 1001
    runAsUser: 1001
  podSecurityContext:
    enabled: true
    fsGroup: 1001
  containerSecurityContext:
    enabled: true
    runAsUser: 1001
  podAffinityPreset: ""
  podAntiAffinityPreset: ""
  nodeAffinityPreset:
    type: ""
    key: ""
    values: []
  affinity: {}
  priorityClassName: ""
  nodeSelector: {}
  tolerations: []
  topologySpreadConstraints: []
  resources:
    limits: {}
    requests:
      cpu: 25m
      memory: 256Mi
  startupProbe:
    enabled: false
    initialDelaySeconds: 90
    periodSeconds: 10
    timeoutSeconds: 5
    successThreshold: 1
    failureThreshold: 5
  livenessProbe:
    enabled: true
    initialDelaySeconds: 90
    periodSeconds: 10
    timeoutSeconds: 5
    successThreshold: 1
    failureThreshold: 5
  readinessProbe:
    enabled: true
    initialDelaySeconds: 90
    periodSeconds: 10
    timeoutSeconds: 5
    successThreshold: 1
    failureThreshold: 5
  customStartupProbe: {}
  customLivenessProbe: {}
  customReadinessProbe: {}
  initContainers: []
  sidecars: []
  service:
    type: ClusterIP
    port: 9300
    nodePort: ""
    annotations: {}
    loadBalancerIP: ""
  serviceAccount:
    create: false
    name: ""
curator:
  enabled: false
  name: curator
  image:
    registry: docker.io
    repository: bitnami/elasticsearch-curator
    tag: 5.8.4-debian-10-r305
    pullPolicy: IfNotPresent
    pullSecrets: []
  cronjob:
    schedule: "0 1 * * *"
    annotations: {}
    concurrencyPolicy: ""
    failedJobsHistoryLimit: ""
    successfulJobsHistoryLimit: ""
    jobRestartPolicy: Never
  schedulerName: ""
  podAnnotations: {}
  podLabels: {}
  podAffinityPreset: ""
  podAntiAffinityPreset: ""
  nodeAffinityPreset:
    type: ""
    key: ""
    values: []
  initContainers: []
  sidecars: []
  affinity: {}
  nodeSelector: {}
  tolerations: []
  topologySpreadConstraints: []
  rbac:
    enabled: false
  serviceAccount:
    create: true
    name: ""
  psp:
    create: false
  hooks:
    install: false
    upgrade: false
  dryrun: false
  command: ["curator"]
  env: {}
  configMaps:
    action_file_yml: |-
      ---
      actions:
        1:
          action: delete_indices
          description: "Clean up ES by deleting old indices"
          options:
            timeout_override:
            continue_if_exception: False
            disable_action: False
            ignore_empty_list: True
          filters:
          - filtertype: age
            source: name
            direction: older
            timestring: '%Y.%m.%d'
            unit: days
            unit_count: 90
            field:
            stats_result:
            epoch:
            exclude: False
    config_yml: |-
      ---
      client:
        hosts:
          - {{ template "elasticsearch.coordinating.fullname" . }}.{{ .Release.Namespace }}.svc.{{ .Values.clusterDomain }}
        port: {{ .Values.coordinating.service.port }}
        # url_prefix:
        # use_ssl: True
        # certificate:
        # client_cert:
        # client_key:
        # ssl_no_validate: True
        # http_auth:
        # timeout: 30
        # master_only: False
      # logging:
      #   loglevel: INFO
      #   logfile:
      #   logformat: default
      #   blacklist: ['elasticsearch', 'urllib3']
  resources:
    limits: {}
    requests: {}
  priorityClassName: ""
  extraVolumes: []
  extraVolumeMounts: []
  extraInitContainers: []
metrics:
  enabled: false
  name: metrics
  image:
    registry: docker.io
    repository: bitnami/elasticsearch-exporter
    tag: 1.3.0-debian-10-r160
    pullPolicy: IfNotPresent
    pullSecrets: []
  extraArgs: []
  hostAliases: []
  schedulerName: ""
  service:
    type: ClusterIP
    annotations:
      prometheus.io/scrape: "true"
      prometheus.io/port: "9114"
  podAffinityPreset: ""
  podAntiAffinityPreset: ""
  nodeAffinityPreset:
    type: ""
    key: ""
    values: []
  affinity: {}
  nodeSelector: {}
  tolerations: []
  topologySpreadConstraints: []
  resources:
    limits: {}
    requests: {}
  livenessProbe:
    enabled: true
    initialDelaySeconds: 60
    periodSeconds: 10
    timeoutSeconds: 5
    successThreshold: 1
    failureThreshold: 5
  readinessProbe:
    enabled: true
    initialDelaySeconds: 5
    periodSeconds: 10
    timeoutSeconds: 1
    successThreshold: 1
    failureThreshold: 5
  podAnnotations:
    prometheus.io/scrape: "true"
    prometheus.io/port: "9114"
  podLabels: {}
  serviceMonitor:
    enabled: false
    namespace: ""
    labels: {}
    interval: ""
    scrapeTimeout: ""
    selector: {}
sysctlImage:
  enabled: true
  registry: docker.io
  repository: bitnami/bitnami-shell
  tag: 10-debian-10-r387
  pullPolicy: IfNotPresent
  pullSecrets: []
  resources:
    limits: {}
    requests: {}
volumePermissions:
  enabled: false
  image:
    registry: docker.io
    repository: bitnami/bitnami-shell
    tag: 10-debian-10-r387
    pullPolicy: IfNotPresent
    pullSecrets: []
  resources:
    limits: {}
    requests: {}
kibana:
  elasticsearch:
    hosts:
      - '{{ include "elasticsearch.coordinating.fullname" . }}'
    port: 9200
